# -*- coding: utf-8 -*-
"""form20dash.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lVHQzu86PrYnd9aZOkkKVejHCxhtc__p
"""

import panel as pn
from panel.interact import interact
pn.extension(comms='vscode')

import hvplot.pandas

import holoviews as hv
from holoviews import opts
hv.extension('bokeh')

import matplotlib.pyplot as plt
import seaborn as sns

import pandas as pd
import numpy as np

test = pd.read_csv(r"C:\Users\Pavan\Downloads\AE2018.csv",encoding = "unicode_escape")

test = test[(test['PS No'] != 0)]
test = test[(test['PS No'] != '0')]
test = test[(test['PS No'] != 'Grand Total')]
test = test[(test['PS No'] != 'postal')]
test = test[(test['PS No'] != 'service')]
test = test[(test['PS No'] != 'ETPBS')]
# test

# test.iloc[0,3]

# cname = []
cnolist = test['Constituency No'].unique().tolist()
cnolist.sort(reverse=False)
temcnolist = []
temcnamel = []
tcnamecno = []
for i in cnolist:
  temcnolist.append(i)
  k = test.loc[test['Constituency No']==i,'Constituency Name'].iloc[0]
  temcnamel.append(test.loc[test['Constituency No']==i,'Constituency Name'].iloc[0])
  tcnamecno.append(str(i) +'_'+str(k))



def piechart(x):
  x = int(x.split('_')[0])
  tdf = pd.DataFrame(columns=['Party','Votes'])
  tempdf = test[test['Constituency No']==x]
  for i in tempdf['Party'].unique():
    if i!='IND':
      vsum = tempdf.loc[tempdf['Party']==i,'PS Votes'].sum()
      tdf.loc[len(tdf)] = [i,vsum]
    else:
      tempdf2 = tempdf[tempdf['Party']=='IND']
      for j in tempdf2['Candidate'].unique():
        vsum = tempdf2.loc[tempdf2['Candidate']==j,'PS Votes'].sum()
        tdf.loc[len(tdf)]= ['IND_'+ j,vsum]

  tdf.sort_values(by='Votes',ascending = False,inplace = True)
  tdf.reset_index(drop = True,inplace = True)
  tdf2 = tdf.iloc[4: , :]
  tdf2sum = tdf2['Votes'].sum()
  tdf = tdf.iloc[:4,:]
  tdf.loc[len(tdf)] = ['Others', tdf2sum]
  return tdf.hvplot.bar(x='Party',y='Votes',alpha = 0.8,height = 200,width = 200)


def f(x):
  tlist = []
  x = int(x.split('_')[0])
  tempdf = test[test['Constituency No']==x]
  partynames = tempdf['Party'].unique().tolist()
  try:
    partynames.remove('IND')
    tempdf1 = tempdf[tempdf['Party']=='IND']
    icanname = tempdf1['Candidate'].unique().tolist()
    icannamef = ['IND_'+ s for s in icanname]
    partynames.extend(icannamef)
  except:
    pass
  
  tcname = tempdf.iloc[0,3]
  tcat = tempdf.iloc[0,4]
  twin = tempdf.loc[tempdf['Position']==1,'Party'].iloc[0]
  trun = tempdf.loc[tempdf['Position']==2,'Party'].iloc[0]
  tlist = [partynames,tcname,tcat,twin,trun]
  # print(tlist)

  return tlist

def gettop5(df,cnum,party):
  cnum = int(cnum.split('_')[0])
  tdf = df[(df['Constituency No']==cnum) & (df['Party']==party)]
  tdf = tdf.sort_values(by = 'PS Votes',ascending = False)  
  tdf = tdf.head(5)
  tdf = tdf[['PS No','PS Votes']]
  return tdf
def getleast5(df,cnum,party):
  cnum = int(cnum.split('_')[0])
  tdf2 = df[(df['Constituency No']==cnum) & (df['Party']==party)]
  tdf2 = tdf2.sort_values(by = 'PS Votes',ascending = True)  
  tdf2 = tdf2.head(5)
  tdf2 = tdf2[['PS No','PS Votes']]
  return tdf2

cdropdown = pn.widgets.Select(name = 'Constituency',options = tcnamecno)
pdropdown = pn.widgets.Select(name = 'Party',options = f(cdropdown.value)[0])
cnametxt = pn.widgets.StaticText(name = 'Constituency',value =f(cdropdown.value)[1])
cnotxt = pn.widgets.StaticText(name = 'Constituency No',value = cdropdown.value.split("_")[0])
cattxt = pn.widgets.StaticText(name = 'Category',value = f(cdropdown.value)[2])
wintxt = pn.widgets.StaticText(name = 'Winner',value = f(cdropdown.value)[3])
runtxt = pn.widgets.StaticText(name = 'Runnerup',value = f(cdropdown.value)[4])
top5 = pn.widgets.DataFrame(name = 'Top 5',text_align = 'center',value = gettop5(test,cdropdown.value,pdropdown.value),show_index=False)
bottom5 = pn.widgets.DataFrame(name = 'Least 5',text_align = 'center',value = getleast5(test,cdropdown.value,pdropdown.value),show_index=False)
gspec = pn.GridSpec(sizing_mode='stretch_both',mode = 'override',max_height=800)
gspec[1:2,0] = pn.Column(cdropdown,pdropdown)
gspec[3:7,0] = pn.Column(cnametxt,cnotxt,cattxt,wintxt,runtxt)
gspec[0:3,1:3] =  piechart(cdropdown.options[0])
gspec[3,1] = pn.Column('## Top 5')
gspec[3,2] = pn.Column('## Least 5')
gspec[4:7,1] = pn.Column(top5)
gspec[4:7,2] = pn.Column(bottom5)

def update(event):
  tff = f(cdropdown.value)
  # gspec[0,2] = 
  gspec[0:3,1:3] = piechart(cdropdown.value)
  pdropdown.options = tff[0]
  cnotxt.value = cdropdown.value.split("_")[0]
  cnametxt.value = tff[1]
  cattxt.value = tff[2]
  wintxt.value = tff[3]
  runtxt.value = tff[4]
  t5 = gettop5(test,cdropdown.value,pdropdown.value)
  b5 = getleast5(test,cdropdown.value,pdropdown.value)
  top5.value = t5
  bottom5.value = b5

cdropdown.param.watch(update,'value')

# def update2(event):

pdropdown.param.watch(update,'value')



gspec.servable()